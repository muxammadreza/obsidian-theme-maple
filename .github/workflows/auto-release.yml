name: Automated Release

on:
  push:
    branches: 
      - dev      # Beta releases
      - main     # Stable releases
  workflow_dispatch:

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      skip_workflow: ${{ steps.check_commit.outputs.skip_workflow }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if this is an automated commit
        id: check_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          
          echo "Commit message: $COMMIT_MSG"
          echo "Commit author: $COMMIT_AUTHOR"
          
          # Skip if this is an automated commit to prevent infinite loops
          if [[ "$COMMIT_MSG" =~ ^chore:.*bump.*version || "$COMMIT_MSG" =~ ^chore:.*sync.*beta || "$COMMIT_AUTHOR" == "GitHub Action" ]]; then
            echo "This is an automated commit, skipping workflow"
            echo "skip_workflow=true" >> $GITHUB_OUTPUT
          else
            echo "This is a manual commit, proceeding with workflow"
            echo "skip_workflow=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.check_commit.outputs.skip_workflow == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        if: steps.check_commit.outputs.skip_workflow == 'false'
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        if: steps.check_commit.outputs.skip_workflow == 'false'
        run: pnpm install

      - name: Get current version and determine new version
        if: steps.check_commit.outputs.skip_workflow == 'false'
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          BRANCH_NAME="${{ github.ref_name }}"
          
          echo "Current version: $CURRENT_VERSION"
          echo "Branch: $BRANCH_NAME"
          
          if [ "$BRANCH_NAME" = "dev" ]; then
            # Beta release - always beta, increment number
            if [[ "$CURRENT_VERSION" =~ ^(.+)-beta\.([0-9]+)$ ]]; then
              BASE_VERSION="${BASH_REMATCH[1]}"
              BETA_NUM="${BASH_REMATCH[2]}"
              NEW_BETA_NUM=$((BETA_NUM + 1))
              NEW_VERSION="${BASE_VERSION}-beta.${NEW_BETA_NUM}"
            else
              NEW_VERSION="${CURRENT_VERSION}-beta.1"
            fi
            RELEASE_TYPE="beta"
            IS_PRERELEASE="true"
            TARGET_BRANCH="main"  # Push beta to main for BRAT
          elif [ "$BRANCH_NAME" = "main" ]; then
            # Only create stable release if current version is beta (coming from dev)
            if [[ "$CURRENT_VERSION" =~ ^(.+)-beta\.([0-9]+)$ ]]; then
              NEW_VERSION="${BASH_REMATCH[1]}"
              RELEASE_TYPE="stable"
              IS_PRERELEASE="false"
              TARGET_BRANCH="main"
            else
              # If already stable version on main, just exit
              echo "Already stable version on main branch, no action needed"
              echo "skip_workflow=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION (type: $RELEASE_TYPE, target: $TARGET_BRANCH)"

      - name: Update version in files
        if: steps.check_commit.outputs.skip_workflow == 'false'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          # Update package.json
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          
          # Update manifest.json
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$NEW_VERSION';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\n');
          "
          
          echo "Updated version to $NEW_VERSION"

      - name: Build theme
        if: steps.check_commit.outputs.skip_workflow == 'false'
        run: pnpm build

      - name: Create release notes
        if: steps.check_commit.outputs.skip_workflow == 'false'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          RELEASE_TYPE="${{ steps.version.outputs.release_type }}"
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          
          if [ "$RELEASE_TYPE" = "beta" ]; then
            TITLE="ðŸ§ª Maple Theme Beta v${NEW_VERSION}"
            echo "## ðŸ§ª Beta Release v${NEW_VERSION}" > release_notes.md
            echo "" >> release_notes.md
            echo "**Latest Changes:**" >> release_notes.md
            echo "${COMMIT_MSG}" >> release_notes.md
            echo "" >> release_notes.md
            echo "## ðŸ§ª Testing" >> release_notes.md
            echo "This is a pre-release beta version for testing." >> release_notes.md
            echo "" >> release_notes.md
            echo "## ðŸ“¦ Installation via BRAT" >> release_notes.md
            echo "Use repository: \`muxammadreza/obsidian-theme-maple\`" >> release_notes.md
          else
            TITLE="ðŸŽ‰ Maple Theme v${NEW_VERSION}"
            echo "## ðŸŽ‰ Stable Release v${NEW_VERSION}" > release_notes.md
            echo "" >> release_notes.md
            echo "**Latest Changes:**" >> release_notes.md
            echo "${COMMIT_MSG}" >> release_notes.md
            echo "" >> release_notes.md
            echo "## ðŸ“¦ Installation" >> release_notes.md
            echo "- Community Themes: Search for \"Maple\" in Obsidian" >> release_notes.md
            echo "- Manual: Download theme.css" >> release_notes.md
            echo "- BRAT: Use repository \`muxammadreza/obsidian-theme-maple\`" >> release_notes.md
          fi
          
          echo "RELEASE_TITLE=$TITLE" >> $GITHUB_ENV

      - name: Commit and push to target branch
        if: steps.check_commit.outputs.skip_workflow == 'false'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          RELEASE_TYPE="${{ steps.version.outputs.release_type }}"
          TARGET_BRANCH="${{ steps.version.outputs.target_branch }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add package.json manifest.json theme.css
          git commit -m "chore: bump version to v${NEW_VERSION} (${RELEASE_TYPE})"
          
          # For beta releases, force push to main to ensure BRAT compatibility
          if [ "$RELEASE_TYPE" = "beta" ]; then
            echo "Force pushing beta release to main for BRAT compatibility"
            git push origin HEAD:$TARGET_BRANCH --force
          else
            # For stable releases, normal push to main
            git push origin HEAD:$TARGET_BRANCH
          fi

      - name: Create GitHub Release
        if: steps.check_commit.outputs.skip_workflow == 'false'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          IS_PRERELEASE="${{ steps.version.outputs.is_prerelease }}"
          TARGET_BRANCH="${{ steps.version.outputs.target_branch }}"
          
          RELEASE_CMD="gh release create v${NEW_VERSION} --title \"$RELEASE_TITLE\" --notes-file release_notes.md --target $TARGET_BRANCH"
          
          if [ "$IS_PRERELEASE" = "true" ]; then
            RELEASE_CMD="$RELEASE_CMD --prerelease"
          fi
          
          RELEASE_CMD="$RELEASE_CMD theme.css manifest.json"
          
          eval $RELEASE_CMD
          echo "Release created: v${NEW_VERSION}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup-old-betas:
    runs-on: ubuntu-latest
    needs: auto-release
    if: github.ref_name == 'dev' && needs.auto-release.outputs.skip_workflow != 'true'
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean up old beta releases
        run: |
          gh release list --limit 10 --json tagName,isPrerelease | \
          jq -r '.[] | select(.isPrerelease == true) | .tagName' | \
          tail -n +4 | \
          xargs -I {} gh release delete {} --yes || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
